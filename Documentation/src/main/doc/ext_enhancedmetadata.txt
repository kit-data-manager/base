[[ChapterEnhancedMetadataArchitecture]]
== Enhanced Metadata Handling

As KIT Data Manager aims to be applicable for many heterogeneous communities, it potentially has to support a huge number of community-specific metadata schemas, in our case summarized as content metadata. As this goes hand in hand with a lot
of domain-specific knowledge, development effort and additional dependencies we have decided to outsource content metadata handling to a separate module providing a collection of examples and tools to extract and publish 
content metadata. The basic workflow for handling content metadata in KIT Data Manager is relatively straightforward:

[disc]
- Register a metadata schema in KIT Data Manager
- Implement and deploy a <<ChapterStagingProcessorCoding,Staging Processor>> for extracting metadata of the registered schema during data ingest
- Associate the Staging Processor with an ingest operation to enable the metadata extraction
- Publish/harvest the extracted metadata in/by an external system

At some points, concrete implementations of content metadata handling may implement this workflow differently. However, all examples and tools of the 
Enhanced Metadata Module try to follow this basic workflow, but first, let's check the workflow steps in detail.

Register a Metadata Schema::
    Metadata schema definitions are part of KIT Data Manager's administrative metadata. It consists of a (unique) schema identifier and a schema URL. At the moment a 
    Metadata Schema and its identifier are used to distinguish between different schemas, e.g. to publish different schemas in different ways. Currently, there is no 
    mechanism implemented for validating the provided schema URL, but such feature might be available in future versions. Registering a new metadata schema can be done easily
    using the Base Metadata REST service or Java APIs of the KIT Data Manager Metadata Management and Base Metadata.
Implement a Staging Processor for Extracting Metadata::
    Extracting metadata is implemented as part of the KIT Data Manager ingest process. For adding custom steps to the basic ingest process Staging Processors are used. 
    For metadata extraction a new Staging Processor extending 'edu.kit.dama.mdm.content.impl.AbstractMetadataExtractor' must be implemented and deployed. 
    The implementation of 'AbstractMetadataExtractor' allows to link the processor to a metadata schema, it defines where extracted metadata is stored and it also defines the different phases of 
    the metadata extraction process. Typically, after executing a Staging Processor for metadata extraction an XML file containing the metadata following the linked schema will be created and stored next 
    to the ingested data. Details on how the content metadata is extracted from which sources (e.g. from the ingested files or from some external source) and how to perform 
    error handling (e.g. ignore errors or define the associated ingest as 'failed') are defined by the implementation. For examples and details on how to implement such a 
    Staging Processor please refer to the <<ChapterEnhancedMetadataHandling,according chapter>>. 
Associate the Staging Processor with an Ingest or a Download::
    Depending on the configuration of a Staging Processor it might be enabled for each ingest or download by default. If not, e.g. if different metadata extractors are used for different ingests, 
    it can be enabled while requesting a new ingest or download via the Java APIs or using the REST interface of the staging service.
Publish Extracted Metadata::
    This final workflow step defines how and where extracted metadata is published. For this, the XML file written in the previous step has to be read, transformed if required and registered
    in an external metadata store, index or any other location. In case of the reference implementation of the Enhanced Metadata Module the XML file is read, transformed to a JSON structure and then sent to a local 
    Elasticsearch index. Now, the only open question is how the link to the Digital Object stored in KIT Data Manager is achieved. As mentioned before content metadata is linked via the OID of a 
    Digital Object. For our reference implementation this means that the document id in Elasticsearch is equal to the OID in the repository system, which makes the mapping between both 
    systems simple. In other cases it is imaginable that the OID is stored as part of the metadata, if there is an appropriate field available, or the mapping has to be realized by 
    some custom service or tool.
    
Summarizing, the concept of handling content metadata in KIT Data Manager offeres a lot of flexibility. The following chapter descibed how the default metadata extraction workflow based on METS documents 
is realized and how it can be customized.

[[ChapterEnhancedMetadataHandling]]
=== Metadata Extraction (METS)
As decribed before, the basic content metadata workflow is divided into extraction and publishing. The metadata extraction process is accomplished by Staging Processors. 
For details about Staging Processors and their anatomy please refer to <<ChapterStagingProcessorCoding,this section>>. Compared to standard Staging Processors the ones responsible for
metadata extraction extend 'MetsMetadataExtractor' instead of 'AbstractStagingProcessor'. 
There are some additional configuration fields: 

CommunityMetadataDmdId::
    Id of the descriptive metadata section of the mets document containing the community metadata. This id should be defined in the mets profile of the according community.
CommunityMDType::
    Id of an endorsed metadata type defined by the mets standard. Possible types are: [MARC, MODS, EAD, DC, NISOIMG, LC-AV, VRA, TEIHDR, DDI, FGDC, LOM, PREMIS, PREMIS:OBJECT,
    PREMIS:AGENT, PREMIS:RIGHTS, PREMIS:EVENT, TEXTMD, METSRIGHTS, ISO 19115-2003 NAP, EAC-CPF, LIDO, OTHER]. If no MDType is defined, an external metadata schema identified 
    via the property 'communityMetadataSchemaId' might be used instead.
CommunityMetadataSchemaId::
    Id of the metadata schema registered at the repository. The schema url is used as OTHERMDTYPE attribute in the according descriptive metadata section.
    The value has to be the unique identifier of a metadata schema previously defined (for more information, please refer to `Register a Metadata Schema` 
    in section <<Enhanced Metadata Module, Enhanced Metadata Module>>).


==== Add indexer plugins (optional)
There may be an undefined number of indexers used for indexing different types of metadata for the search engine. 
Right now (11/2016) the following indexers are available:

Plugin:bmd::
    Extractor of the base metadata, which is available for every digital object.
Plugin:oai_dc::
    Extractor of the Dublin Core metadata.

===== Implement Interface
To add your own indexer based on METS document the 'IMetsTypeExtractor' has to be implemented. 
Create a new project with dependency to maven project 'MDM-Content'.

===== Register new plugin
To register a new plugin the pom.xml has to be prepared like the following:
--------------------------------------
      <plugin>
        <groupId>eu.somatik.serviceloader-maven-plugin</groupId>
        <artifactId>serviceloader-maven-plugin</artifactId>
        <version>1.0.7</version>
        <configuration>
          <services>
            <param>edu.kit.dama.content.mets.plugin.IMetsTypeExtractor</param>
          </services>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>generate</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
--------------------------------------

===== Register new metadata schema
To enable the implemented plugin the linked metadata schema has to be registered.
[horizontal]
schema identifier:: 'name' of the plugin
schema URL:: namespace of the generated XML document.

===== Add new plugin to KIT Data Manager 
That's it. Now you can generate and add the jar file in the lib directory and restart 
KIT Data Manager.


=== Implement Metadata Extraction (METS)
Link to Metadata Schema::
    Each implemented 'AbstractMetadataExtractor' must be associated with a metadata schema using an internal property with the key 'METADATA_SCHEMA_IDENTIFIER'. The value will be the unique identifier of a metadata 
    schema previously defined (for more information, please refer to `Register a Metadata Schema` in section <<Enhanced Metadata Module, Enhanced Metadata Module>>). 
Custom Configuration::
    As the internal properties of the Staging Processor base class are used to associate a metadata schema with an implemented 'AbstractMetadataExtractor', metadata extractors are using an alternative way for
    providing custom properties. For this purpose the methods `getExtractorPropertyKeys()`, `getExtractorPropertyDescription()`, `validateExtractorProperties(Properties pProperties)` 
    and `configureExtractor(Properties pProperties)` are the equivalents for the according methods having the term `Internal` instead of `Extractor` in their method signature. At runtime the 
    'AbstractMetadataExtractor' base implementation takes care of merging both property lists together.  
Metadata Extraction Workflow::
    The base class 'MetsMetadataExtractor' realizes a basic workflow for metadata extraction. The community metadata may be extracted by a community specific implementation
    of the method `createCommunitySpecificDocument(TransferTaskContainer pContainer)` which delivers a document containing all community specific metadata.

By default, the resulting Mets document fulfills a 'Metadata for Applied Sciences (MASI)' profile, which looks as follows: 

[source,xml]
--------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<mets xmlns="http://www.loc.gov/METS/" OBJID="f5b984c8-42e9-4a39-95fa-542589108201" PROFILE="http://datamanager.kit.edu/dama/metadata/2016-08/Metadata4AppliedSciences-METS-profile.xml" TYPE="edu.kit.dama.mdm.base.DigitalObject" xmlns:xs="http://www.w3.org/2001/XMLSchema-instance" xs:schemaLocation="http://www.loc.gov/METS/ http://www.loc.gov/standards/mets/mets.xsd">
  <metsHdr CREATEDATE="2016-11-09T13:40:30Z" LASTMODDATE="2016-11-09T13:40:30Z">
    <agent ROLE="CREATOR" TYPE="OTHER">
      <name>last name, first name</name>
    </agent>
  </metsHdr>
  <dmdSec ID="DUBLIN-CORE">
    <mdWrap MDTYPE="OTHER" MIMETYPE="text/xml" OTHERMDTYPE="OAI-DUBLIN-CORE">
      <xmlData>
        <oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd">
          <dc:title>DigitalObject_2016_05_27T09_57</dc:title>
          ...
          <dc:format>application/octet-stream</dc:format>
          <dc:type>Dataset</dc:type>
          <dc:identifier>f5b984c8-42e9-4a39-95fa-542589108201</dc:identifier>
        </oai_dc:dc>
      </xmlData>
    </mdWrap>
  </dmdSec>
  <amdSec ID="KIT-DM-AMD">
    <sourceMD ID="KIT-DM-BASEMETADATA">
      <mdWrap MDTYPE="OTHER" MIMETYPE="text/xml" OTHERMDTYPE="KIT-DM-BASEMETADATA">
        <xmlData>
          <basemetadata xmlns="http://datamanager.kit.edu/dama/basemetadata" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://datamanager.kit.edu/dama/basemetadata http://datamanager.kit.edu/dama/basemetadata/2015-08/basemetadata.xsd">
            <digitalObject>
              <baseId>22</baseId>
              <digitalObjectIdentifier>f5b984c8-42e9-4a39-95fa-542589108201</digitalObjectIdentifier>
              <endDate>2016-11-08T11:45:48+01:00</endDate>
              <label>DigitalObject_2016_05_27T09_57</label>
              <note>Any note about digital object.</note>
              ...
            </digitalObject>
          </basemetadata>
        </xmlData>
      </mdWrap>
    </sourceMD>
    <sourceMD ID="KIT-DM-DATAORGANIZATION">
      <mdWrap MDTYPE="OTHER" MIMETYPE="text/xml" OTHERMDTYPE="KIT-DM-DATAORGANIZATION">
        <xmlData>
          <dataOrganization xmlns="http://datamanager.kit.edu/dama/dataorganization" xs:schemaLocation="http://datamanager.kit.edu/dama/dataorganization http://datamanager.kit.edu/dama/dataorganization/2015-08/dataorganization.xsd">
            <digitalObjectId>855930f7-b284-4e14-88ad-46be588ff91b</digitalObjectId>
            <view xmlns:NS1="http://datamanager.kit.edu/dama/dataorganization" NS1:name="default">
              <root>
                <name/>
                <logicalFileName>http://hostname:8080/KITDM/rest/dataorganization/organization/download/id/</logicalFileName>
                <children>
                  <child>
                    <name>metadata</name>
                    <logicalFileName>http://hostname:8080/KITDM/rest/dataorganization/organization/download/id/metadata</logicalFileName>
                    <attributes>
                      <attribute>
                        <key>children</key>
                        <value>1</value>
                      </attribute>
                      <attribute>
                        <key>size</key>
                        <value>22</value>
                      </attribute>
                      <attribute>
                        <key>lastModified</key>
                        <value>1479120151000</value>
                      </attribute>
                      <attribute>
                        <key>directory</key>
                        <value>true</value>
                      </attribute>
                    </attributes>
                    <children>
                      <child>
                        <name>anyFile.ext</name>
                        <logicalFileName>http://hostname:8080/KITDM/rest/dataorganization/organization/download/id/anyFile.ext</logicalFileName>
                        <attributes>
                          <attribute>
                            <key>lastModified</key>
                            <value>1479120111000</value>
                          </attribute>
                          <attribute>
                            <key>directory</key>
                            <value>false</value>
                          </attribute>
                          <attribute>
                            <key>size</key>
                            <value>22</value>
                          </attribute>
                        </attributes>
                      </child>
                    </children>
                  </child>
                </children>
              </root>
            </view>
          </dataOrganization>
        </xmlData>
      </mdWrap>
    </sourceMD>
  </amdSec>
  <fileSec>
    <fileGrp ID="KIT-DM-FILE-GROUP"/>
  </fileSec>
  <dmdSec ID="EXAMPLE">
    <mdWrap MDTYPE="OTHER" MIMETYPE="text/xml">
      <xmlData>
        <example:metadata xmlns:example="http://www.example.org/1.0/">
          <example:title>Any title</example:title>
          ...
        </examle:metadata>
      </xmlData>
    </mdWrap>
  </dmdSec>
  <fileSec>
    <fileGrp ID="KIT-DM-FILE-GROUP">
      <file ID="FILE-0">
        <FLocat LOCTYPE="URL" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://hostname:8080/KITDM/rest/dataorganization/organization/download/id/anyFile.ext"/>
      </file>
    </fileGrp>
  </fileSec>
  <dmdSec ID="XML">
    <mdWrap MDTYPE="OTHER" MIMETYPE="text/xml">
      <xmlData>
        <dc:nometadata xmlns:dc="http://www.openarchives.org/OAI/2.0/oai_dc.xsd"/>
      </xmlData>
    </mdWrap>
  </dmdSec>
  <structMap ID="KIT-DM-FILE-VIEW" LABEL="default">
    <div LABEL="root" TYPE="folder">
      <fptr FILEID="FILE-0"/>
      <div LABEL="metadata" TYPE="folder">
        <fptr FILEID="FILE-0"/>
      </div>
    </div>
  </structMap>
</mets>

--------------------------------------


[NOTE]
Even if putting all Base Metadata in the resulting XML document is part of the standard workflow this is not mandatory. Overwriting 'createMetadataDocument(TransferTaskContainer pContainer)' 
is also a legitimate way to provide the content metadata XML document in a custom way.

Finally, the resulting document is written to a file named `<SID>_<OID>.xml` where <SID> is the unique identifier of the associated metadata schema and <OID> the Digital Object identifier. 
The file is stored in the `generated` folder of the associated ingest. Finally, a new metadata indexing task for indexing the previously created XML file is scheduled by creating a new indexing task entry in the database.

In the publishing phase the previously configured scheduler for metadata indexing performs the following workflow: 

[disc]
- Check the database for new metadata indexing task entries
- Take the next unprocessed entry and read the associated XML files
- Convert the XML file into a JSON structure
- Publish the JSON structure to an Elasticsearch node running on localhost:9300 (default Elasticsearch settings) belonging to cluster and index stated in the paramters (default cluster is 'KITDataManager', default index 'dc').
- Update the indexing entry in the database to a success/error state

Querying the Elasticsearch index can then be done using the Elasticseach APIs that can be found at https://www.elastic.co/. 

For the described approach for extracting metadata there is one basic implementation available in class `edu.kit.dama.mdm.content.mets.BasicMetsExtractor`. The following sections describe the basic configuration steps 
of setting up this basic extractor followed by the configuration of metadata indexing.

=== Configuring Metadata Extraction
A new metadata extractor can be registered as staging processor using the administration backend of KIT Data Manager. For this purpose please browse to
`http://localhost:8080/KITDM` in the browser of your KIT Data Manager machine and login. By default the administrator email is `dama@kit.edu` and the password is `dama14`. 
Open the settings page using the button with the gears image:Settings_Button.png[Settings_Button, width="30"] and select the tab `Staging Processors`.
At first, insert `edu.kit.dama.mdm.content.mets.BasicMetsExtractor` as Implementation Class. Clicking the button next to the input fields will create
a new staging processor. Now, please insert all values as shown in the following screenshots in order to configure the staging processor properly. 

[[METS1]]
.Basic configuration of the Mets extractor. The most important settings are in the General Options where the extractor is enabled and made assignable to ingest operations. All other fields, e.g. the name, can be customized as required. 
image::screenshots/AdminUI_Mets1.png[METS1]

[[METS2]]
.Extended properties of the Mets extractor. Properties in this view may change depending on the local installation and the supported community. The screenshot shows a default configuration as it should work for every installation.
image::screenshots/AdminUI_Mets2.png[METS2]

Finally, commit all changes using the Commit button on the lower right. As a result, different metadata documents will be extracted during each ingest. These documents are then located in the 'generated' folder,
which is also ingested and available in an according Data Organization view afterwards:

- *metadata/bmd_<OID>.xml* +
- *metadata/mets_<OID>.xml* +
- *metadata/oai_dc_<OID>.xml* +

Access to these documents is now possible in the same way as accessing data, just by addressing the 'generated' view instead of the 'default' view. If the metadata should be made searchable, registerin the generated 
metadata in a search index is required. How to achieve this is described in the following chapter.  

=== Configuring Metadata Indexing
During metadata extraction for each created documents also a MetadataIndexingTask is registered. This allows to index the metadata documents at a search index by a separate process.
For default installations the internal job scheduler should be used for indexing metadata, which can be configured using the administration backend of KIT Data Manager. 
Please refer to the <<ChapterJobScheduling,according section>> for details.

In the following tables recommended settings for the MetadataIndexer job are listed:

[cols="m,n", options="header"]
|===============================================================================================================================
|Attributes|Value
|`JOB_IMPLEMENTATION_CLASS`|edu.kit.dama.mdm.content.scheduler.jobs.MetadataIndexerJob
|`JOB_GROUP`|Metadata
|`JOB_NAME`|MetadataIndexer
|`DESCRIPTION`|Indexing metadata to an Elasticsearch instance.
|`TRIGGERS`|(Should be added after changes are committed)
|===============================================================================================================================

In the 'Extended Properties' section the following settings should be applied. Most of them depend on your local configuration inside '$KITDM_LOCATION/KITDM/WEB-INF/classes/datamanager.xml':

[cols="m,n", options="header"]
|===============================================================================================================================
|Attributes|Value
|`groupid`| e.g.: USERS
|`hostname`|Hostname of the Elasticsearch instance configured at elasticsearch.host, e.g. localhost
|`cluster`|Cluster name of the Elasticsearch instance configured at elasticsearch.cluster, e.g. KITDataManager@localhost
|`index`|Default index of the Elasticsearch instance configured at elasticsearch.index, e.g. kitdatamanager
|===============================================================================================================================

Finally, after creating the scheduler job via 'Commit Changes', add a trigger to the created job. It is recommended to add an 'Interval' trigger executing the indexing task for example every 30 seconds.

For more examples how to use the Enhanced Metadata Handling please refer to the source code repository of the according sub-module of KIT Data Manager at https://github.com/kit-data-manager/base/tree/master/MetaDataManagement/MDM-Content