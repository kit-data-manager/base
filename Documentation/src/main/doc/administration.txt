Administration UI
-----------------

The Administration UI, shortly *AdminUI*, is a straightforward Web application 
for administrating users and user groups, registered at KIT Data Manager. 
It further allows an effortless configuration of all required staging components.

[[ChapterLogin]]
Login
~~~~~

In order to access the KIT Data Manager AdminUI you first have to register. 
After browsing to the AdminUI, e.g. at http://localhost:8080/KITDM, you will find
the login page. Here you can select between different login methods, 
e.g. ORCiD or Username/Password, which also can be used to register a new account.

From KIT Data Manager perspective it makes no difference whether an account is created 
via ORCiD or directly by providing a username and a password, but during the registration
process the ORCiD service might be used to obtain user details like email or name, which 
are then filled into the registration form automatically. Furthermore, the login via ORCiD 
is much more convenient for the user. However, in every case there is also create a 
password login credential for the case that an external authentication service is not available.

[NOTE]
UI components tagged with image:Tag_Required.png[Tag] are mandatory and/or expect a value with a certain 
character length.

[[ChapterViews]]
Views
~~~~~
The KIT Data Manager AdminUI provides a couple of views responsible for different tasks. After login you see the 
information view providing a few information about the repository content. Other views and functionalities, 
which can be selected in the upper left area of the AdminUI, are namely: 

--
<<ChapterInformation,image:Information_Button.png[Information_Button, width="45"]>> Information

<<ChapterProfile,image:Profile_Button.png [Profile_Button, width="45"]>> Profile

<<ChapterSiMon,image:SiMon_Button.png[SiMon_Button, width="45"]>> Simple Monitoring 'SiMon'

<<ChapterSettings,image:Settings_Button.png[Settings_Button, width="45"]>> System Settings

<<ChapterLogout,image:Logout_Button.png[Logout_Button, width="45"]>> Logout
--

[[ChapterInformation]]
Information
^^^^^^^^^^^

The information-view, displayed by clicking the menu item image:Information_Button.png[Information_Button, width="30"], 
offers you a basic overview of the repository, e.g. the number of groups, digital objects and occupied disc space.

[[Information]]
image::screenshots/Information.png[Information, align="center"]

[[ChapterProfile]]
Profile
^^^^^^^

The profile-view, displayed by clicking the menu item 
image:Profile_Button.png[Profile_Button, width="30"], 
gives an overview of your personal information and allows you to manage your credentials. 
Among the possibility to change your login-password for the AdminUI, 
it also offers you the (re-)generation of your OAuth credentials, e.g. if they where 
compromised, or to link an ORCiD Id to your account in order to enable ORCiD login.

[[AccountPreferences]]
image::screenshots/Profile.png[Profile, align="center"]

In the lower part of the screen you can find the credentials table. Next to the table there are a couple of buttons
for adding, modifying, removing and reloading credentials. If you want to create a new credential, click the 
button image:add.png[Add, width="30"]. In the resulting dialog you can select the credential type you want to create. 
Depending on the type, credential key and secret must be provided.

[NOTE]
Please be aware that for each user only one credential of each type can be provided. Furthermore, depending on the credential
type, it is not possible to see the plain credential secret. In that case, if you forgot the secret, you have to create a new
secret.

[[ChapterSiMon]]
SiMon - SimpleMonitoring
^^^^^^^^^^^^^^^^^^^^^^^^

image::screenshots/SiMon.png[SiMon, align="center"]

SiMon offers a simple and configurable service monitoring. For this purpose different so called `Probes` can be defined. 
By default, there are four different probe types:

[horizontal]
`edu.kit.dama.ui.simon.impl.MountProbe`:: This probe can be used to check the availability of mount points. It checks whether to 
configured location is readable and writable. See `$KITDM_LOCATION/simon/MOUNT.properties' for an example.

`edu.kit.dama.ui.simon.impl.RestServiceProbe`:: This probe checks the availability of a RESTful service. Therefore, the service URL 
and an unsecured service method must be provided. If the method returns HTTP 200 the probe succeeds. See `$KITDM_LOCATION/simon/REST.properties' 
for an example.

`edu.kit.dama.ui.simon.impl.WebServerProbe`:: This probe simply tries to connect to a Web Server behind a specified URL. If the call succeeds within the provided timeout, the probe 
also succeeds. See `$KITDM_LOCATION/simon/WEBSERVER.properties' for an example.

`edu.kit.dama.ui.simon.impl.ShellScriptProbe`:: This probe should cover all other scenarios as it allows to execute an arbitrary shell script. If the shell script finishes with the exit code 0 
the probe succeeds. See `$KITDM_LOCATION/simon/SCRIPT.properties' for an example.

You can also create own probes by implementing `edu.kit.dama.ui.simon.impl.AbstractProbe` and placing the Jar file containing your probe class at 
`$KITDM_LOCATION/KITDM/WEB-INF/lib` Please refer to the JavaDoc for detailed information.

The SiMon view in the AdminUI shows all configured probes in the Overview tab. Furthermore, there are tabs for each probe category only showing probes in the according category. Depending on the
probe status the probe representation in the overview tab is one of the following:

[cols="m,n", options="header"]
|============================================================================================================================
|Status|Probe Style
|Success|Green background and solid black border
|Failed|Red background and solid black border
|Updating|Grey background and solid black border
|Unknown|Grey background and dashed black border
|Unavailable|Grey background and solid red border
|============================================================================================================================
 
[[ChapterSettings]]
Settings
^^^^^^^^

The settings-view, displayed by clicking the menu item image:Settings_Button.png[Settings_Button, width="30"], 
offers access to all system settings of your KIT Data Manager instance. Among the administration of users and 
user groups it allows the configuration other configurable elements:

[none]
- <<ChapterUserAdministration,image:UserAdmin_TabIcon.png[UserAdmin_TabIcon] User Administration>>
- <<ChapterGroupAdministration,image:GroupAdmin_TabIcon.png[GroupAdmin_TabIcon] Group Administration>>
- <<ChapterStagingAccessPointConfiguration,image:AccessPoint_TabIcon.png[AccessPoint_TabIcon] Staging Access Point Configuration>>
- <<ChapterStagingProcessorConfiguration,image:StagingProcessor_TabIcon.png[StagingProcessor_TabIcon] Staging Processor Configuration>>
- <<ChapterExecutionEnvironments,image:ExecutionEnvironment_TabIcon.png[ExecutionEnvironment_TabIcon] Execution Environment Configuration>>
- <<ChapterDataWorkflowTasks,image:DataWorkflowTask_TabIcon.png[DataWorkflowTask_TabIcon] Data Workflow Task Configuration>>
- <<ChapterJobScheduling,image:JobScheduling_TabIcon.png[JobScheduling_TabIcon] Job Scheduling Configuration>>

[WARNING]
The menu item image:Settings_Button.png[Settings_Button, width="30"] is visible only if your current role is either MANAGER or ADMINISTRATOR. 
The role is defined per group. By default, after logging in at the AdminUI, your active group is 'USERS'. To change the active group 
use the combobox in the upper right corner of the AdminUI. Next to the selection box you can also find you current role.

[[ChapterUserAdministration]]
User Administration
^^^^^^^^^^^^^^^^^^^

The set of functionalities offered by the user-administration-tab depends on your current role. There are the following possibilities:

`MANAGER`:: If you are manager you are allowed to see user information. You are also allowed to change basic information, 
e.g. first and last name and validation period, of yourself and to see your and other group memberships. Furthermore, you are allowed to 
change group memberships for users in groups in which you are group manager.

`ADMINISTRATOR`:: If you are logged in as `ADMINISTRATOR` you have access to all information. Only your maximum role cannot be changed by yourself.

[[UserAdministration]]
image::screenshots/UserAdministration_Selection.png[UserAdministration, align="center"]

[[ChapterMembershipsView]]
Memberships-View
^^^^^^^^^^^^^^^^

For administrating group memberships of a user, select the corresponding user from 
the user-table embedded in the <<ChapterUserAdministration,user-administration-tab>>
and view all memberships by clicking the button `Show Memberships`. 

In the window that is opened you can find all groups the selected user is member in together 
with the according role. If the role is NO_ACCESS the user is either not a member of the group
or the group membership was withdrawn.

[[MembershipsView]]
image::screenshots/MembershipsView.png[MembershipsView,width="400px", align="center"]

In order to change the membership in a specific group select the group in the table, chose the new 
role in the combobox next to the table and click 'Apply New Role'. If the update suceeds, the role is
updated in the table and committed to the database. In case of an error, e.g. if you have insufficient permissions,
an exclamation mark will appear in the info colum. For details please hover over the exclamation mark.

[[ChapterFilterSetter]]
Filter Setter
^^^^^^^^^^^^^

The filter-setter-panel that opens by clicking the icon-button image:AddFilter_Button.png[AddFilter_Button]
placed at the right upper corner of each table allows you to define and set a table filter.

[[Filter]]
image::screenshots/Filter.png[Filter, align="center"]

[horizontal]
`TABLE_COLUMN`:: Combo box listing all filterable table columns

`FILTER_EXPRESSION`:: Text field expecting the expression by which the previously 
selected table column shall be filtered

`FILTER_OPTION`:: Collection of filter options allowing only a single-selection
+
--
`Contains`:: Option for filtering the specified table column by the cell content 
*containing* the given filter expression
`Starts_With`:: Option for filtering the specified table column by the cell 
content *starting* with the given filter expression
`Ends_With`:: Option for filtering the specified table column by the cell 
content *ending* with the given filter expression
--
`Filter`:: Button for setting the customized table filter

[[ChapterGroupAdministration]]
Group Administration
^^^^^^^^^^^^^^^^^^^^

The group-administration-tab allows you to administrate the groups in which you have at least the 'MANAGER' role.
This tab allows you to see and modify group information, e.g. the name or the description.

[[GroupAdministration]]
image::screenshots/GroupAdministration_Selection.png[GroupAdministration, align="center"]

You can also create new groups and <<ChapterMembersView,show members>> of the selected group.

[[ChapterMembersView]]
Members-View
^^^^^^^^^^^^

For administrating the members of a group, select the corresponding group from 
the group-table embedded in the <<ChapterGroupAdministration,group-administration-tab>>
and view all its members by clicking the button `Show Members`. In the opened window you will
find a list of all users who are member of the group together with their role within the group.

[[MembersView]]
image::screenshots/MembersView.png[MembersView,width="400px", align="center"]

On the right hand side you can find a list of 'free' users that are either not a member of the group
or who have the role 'NO_ACCESS', which represents for a withdrawn membership. If you want to add a 
user to a group, select one or more users in the 'USERS' list and click 'Add Member(s)'. If the user is not
in the table it will appear there with the role 'MEMBER'. If the user already was in the table, only the 
role will change to 'MEMBER'. 

To withdraw a group membership select one or more users from the memberships table and click 'Exclude Member(s)'. 
The selected users will be added to the 'free' users list and the role in the memberships table will change to 'NO_ACCESS'.

[NOTE]
The memberships view only allows to switch between role MEMBER and NO_ACCESS. For fine grained role assignment please use the 
<<ChapterMembershipsView,membership administration>> in the user management tab.

[[ChapterStagingAccessPointConfiguration]]
Staging Access Point Configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The staging access point is one of three components relevant for <<ChapterStaging,staging>>. 
A staging access point defines a (remotely and locally accessible) storage location that can be accessed by the user for data up- or download. 
For this purpose each access point has a Remote Base URL defining the access protocol, hostname, port and a common path component, 
and a Local Base Path, which is the local directory corresponding to Remote Base URL. Local Base Path must be writable by the KIT Data Manager
in order to prepare data for up- and download.

The definition of a new access point and the modification of an already existing one are both provided by the staging-access-point-configuration-tab selectable 
from a tab collection in the <<ChapterSettings,settings-view>>:

Create New Access Point:: For creating a new access point, select the item
`NEW` from the left-hand container `AVAILABLE ELEMENTS`. The selection enables 
both, the upper text field `ACCESS POINT IMPLEMENTATION CLASS` and the button 
image:ImplementationClass_Button.png[ImplementationClass_Button]; contemporary 
the lower part of the form, designed for declaring the properties of an access point,
is disabled. For proceeding, enter the fully qualified class name of the implementation class that 
shall be used for creating the new access point, and finalize the access point
creation by clicking image:ImplementationClass_Button.png[ImplementationClass_Button].
+
In case of a successfully created access point, the remaining form is enabled, 
permitting the further configuration of the newly created access point. Now declare 
all remaining properties and confirm them by clicking the button `Commit Changes`.
+
--
'''

[WARNING]
Newly created access points are automatically disabled for security reasons. Enable them by unselecting the check box `Disabled`.

'''
--

View/Modify Existing Access Point:: For viewing or modifying the configuration
of an already declared access point, select the corresponding access point
from the left-hand container `AVAILABLE ELEMENTS`. A valid selection enables
all components of changeable access-point-properties. Commit your changes by
clicking the button `Commit Changes`.

[[StagingAccessPointConfiguration]]
image::screenshots/StagingAccessPointConfiguration_Selection.png[StagingAccessPointConfiguration, align="center"]

[horizontal]
`AVAILABLE_ELEMENTS`:: Container listing all defined access points.

`ACCESS_POINT_IMPLEMENTATION_CLASS`:: Text field declaring the implementation 
class on which the selected access point footnoteref:[nPointSelection, access point selected from the left-hand container of the staging-access-point-configuration-tab] 
is based

image:ImplementationClass_Button.png[ImplementationClass_Button]:: Button for
creating an access point with the implementation class declared in the text 
field `ACCESS_POINT_IMPLEMENTATION_CLASS`

`ACCESS_POINT_NAME`:: Text field displaying the name of the selected access point 
footnoteref:[nPointSelection].

`REMOTE_BASE_URL`:: Text field declaring the remotely accessible base URL for this access point. 
Once declared, it is highly recommended NOT to change the `REMOTE_BASE_URL` without any valid reason. Otherwise, 
already prepared ingests/downloads get invalidated.

`LOCAL_BASE_PATH`:: Text field declaring the locally accessible path corresponding to `REMOTE_BASE_URL`.
Once declared, it is highly recommended NOT to change the `LOCAL_BASE_PATH`. Otherwise, 
already prepared ingests/downloads get invalidated.

`Select_Path`:: Button opening a subwindow for selecting a directory from the local 
file system as `LOCAL BASE PATH`.

`ACCESSIBLE_BY`:: Combo box for defining the user group who is allowed to use the selected access point. 
By default, an access point is linked to group 'USERS', which contains all registered users. In some cases, 
a special access point for a specific user group might be required. In that case, the according group can be selected
at this combo box.

`Default`:: Check box for setting the selected access point footnoteref:[nPointSelection] 
as default staging access point for the user group this access point is associated with. 
For each user group there might be only one default access point. The default access point is used if
no specific access point id is provided while requesting an ingest/download.

`Disabled`:: Check box for disabling the selected access point footnoteref:[nPointSelection].

`DESCRIPTION`:: Text area displaying additional information with respect to the 
selected access point footnoteref:[nPointSelection].

`Commit Changes`:: Button for committing the changed configuration of the selected 
access point footnoteref:[nPointSelection].

[[ChapterStagingProcessorConfiguration]]
Staging Processor Configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

A staging processor defines an operation that is performed before or after staging operations, e.g. data ingests or download.
This may cover data validation, checksumming or metadata extraction. For more details please refer to 
chapter <<ChapterStagingProcessorCoding, Coding: Staging Processor>>.

The definition of a new staging processor and the modification of an already existing 
one are both provided by the staging-processor-configuration-tab selectable 
from a tab collection in the <<ChapterSettings,settings-view>>:

Create New Staging Processor:: For creating a new staging processor, select the item
`NEW` from the left-hand container `AVAILABLE ELEMENTS`. The selection enables 
both, the upper text field `STAGING PROCESSOR IMPLEMENTATION CLASS` and the button 
image:ImplementationClass_Button.png[ImplementationClass_Button]; contemporary 
the lower part of the form, designed for declaring the properties of an staging processor,
is disabled. For proceeding, enter the fully qualified class name of the implementation class that 
shall be used for creating the new staging processor, and finalize the staging processor
creation by clicking image:ImplementationClass_Button.png[ImplementationClass_Button].
+
In case of a successfully created staging processor, the remaining form is enabled, 
permitting the further configuration of the newly created staging processor. Now declare 
all remaining properties and confirm them by clicking the button `Commit Changes`.
+
--
'''

[WARNING]
Newly created staging processors are automatically disabled for security reasons. Enable them by unselecting the check box `Disabled`.

'''
--

View/Modify Existing Staging Processor:: For viewing or modifying the configuration
of an already declared staging processor, select the corresponding staging processor
from the left-hand container `AVAILABLE ELEMENTS`. A valid selection 
enables all components of changeable processor-properties. Finalize your changes 
by clicking the button `Commit Changes`.

[[StagingProcessorConfiguration]]
image::screenshots/StagingProcessorConfiguration_Selection.png[StagingProcessorConfiguration, align="center"]

[horizontal]
`AVAILABLE_ELEMENTS`:: Container listing all defined staging processors.

`PROCESSOR_IMPLEMENTATION_CLASS`:: Text field declaring the implementation 
class on which the selected staging processor footnoteref:[nProcessorSelection, staging processor selected from the left-hand container of the staging-processor-configuration-tab] 
is based

image:ImplementationClass_Button.png[ImplementationClass_Button]:: Button for
creating a staging processor with the implementation class declared in the text 
fiel `PROCESSOR_IMPLEMENTATION_CLASS`

`PROCESSOR_NAME`:: Text field displaying the name of the selected staging processor 
footnoteref:[nProcessorSelection]

`ACCESSIBLE_BY`:: Combo box listing all registered user groups. By selecting a group, 
a staging processor can be associated with a specific group and might be selected only for
staging operations of this group. This is for example relevant for metadata extractors 
extracting metadata in a group-specific metadata model.

`PRIORITY`:: Slider for selecting the processor priority. A higher priority leads to an earlier execution of 
the according processor whereas processors with a priority of '0' are executed at the end.

`Default`:: Check box for setting the selected staging processor footnoteref:[nProcessorSelection] 
as default staging processor.

`Disabled`:: Check box for disabling the selected staging processor footnoteref:[nProcessorSelection].

`Ingest Supported`:: Check box to define whether the processor can be used for data ingest operations or not.

`Download Supported`:: Check box to define whether the processor can be used for data download operations or not.

`DESCRIPTION`:: Text area displaying additional information with respect to the 
selected staging processor footnoteref:[nProcessorSelection].

`Extended Properties`:: Button for switching to the extended properties tab. Depending on the Staging Processor there may or may not 
be extended properties available. If there are mandatory properties, you'll be notified about missing properties on commit.

`Commit Changes`:: Button for committing the changed configuration of the selected 
access processor footnoteref:[nProcessorSelection].

[[ChapterExecutionEnvironments]]
Execution Environments
^^^^^^^^^^^^^^^^^^^^^^

In the execution environment tab of the <<ChapterSettings,settings-view>> so called execution environments for data workflow tasks 
can be defined and configured. Basically, an execution environment is defined by a handler class taking care of task execution and 
monitoring. To allow providing data for the task execution each execution environment is linked to an access point that can be 
used by the repository system to stage data into the computing environment and out of it. Therefor, repository system and computing 
environment must share a storage resource which they both can access locally, e.g. via mount point.

Creating new execution environment is done using the execution-environment-tab selectable in the <<ChapterSettings,settings-view>>:

Create New Execution Environment:: For creating a new execution environment, select the item
`NEW` from the left-hand container `AVAILABLE ELEMENTS`. The selection enables 
both, the upper text field `ENVIRONMENT HANDLER IMPLEMENTATION CLASS` and the button 
image:ImplementationClass_Button.png[ImplementationClass_Button]; contemporary 
the lower part of the form, designed for declaring the properties of a execution environment,
is disabled. For proceeding, enter the fully qualified class name of the implementation class that 
shall be used for creating the new execution environment before clicking 
image:ImplementationClass_Button.png[ImplementationClass_Button].

In case of a successfully created execution environment, the remaining form is enabled, 
permitting the further configuration of the newly created execution environment. Now, declare 
all remaining properties and commit the changes to the execution environment by clicking the button `Commit Changes`. 
In addition, `ENVIRONMENT PROPERTIES` can be defined allowing a more detailed description of the execution environment. 
These properties can be used later on to decide whether a workflow task, which requires a set of `ENVIRONMENT PROPERTIES` 
from a common pool of properties, can be executed using a particular execution environment or not. However, there is currently 
no mechanism to validate whether these properties contain any meaningful value or if e.g. a `Software-Map-Property` describes a 
software which is physically available in the execution environment the property is assigned to.

View/Modify Existing Execution Environment:: For viewing or modifying the configuration
of an already declared execution environment, select the corresponding execution environment
from the left-hand container `AVAILABLE ELEMENTS`. A valid selection 
enables all components of changeable execution-environment-properties. Finalize your changes 
by clicking the button `Commit Changes`.

[[ExecutionEnvironmentConfiguration]]
image::screenshots/ExecutionEnvironmentConfiguration_Selection.png[ExecutionEnvironmentConfiguration, align="center"]

[horizontal]
`AVAILABLE_ELEMENTS`:: Container listing all defined execution environments.

`ENVIRONMENT_HANDLER_IMPLEMENTATION_CLASS`:: Text field declaring the implementation 
class on which the selected execution environment is based.

image:ImplementationClass_Button.png[ImplementationClass_Button]:: Button for
creating an execution environment with the implementation class declared in the text 
fiel `JOB_IMPLEMENTATION_CLASS`

`ACCESS_POINT`:: Combobox allowing to select the access point that can be used to stage data in and out the execution environment.

`ACCESS_POINT_BASE_PATH`:: Text field displaying the base path at which the access point is available within the execution environment.

`MAX_PARALLEL_TASKS`:: Text field displaying the max. number of parallel workflow tasks that should be handled by the environment.

`DESCRIPTION`:: Text area displaying additional information with respect to the 
selected execution environment.

`Default`:: Check box for setting the selected execution environment as default environment.

`Disabled`:: Check box for disabling the selected execution environment.

`ENVIRONMENT_PROPERTIES`:: A twin columns list allowing to select environment properties provided by the execution environment. A button next to the list allows to add new properties.

`Extended Properties`:: Button for switching to the extended properties tab. Depending on the Execution Environment there may or may not 
be extended properties available. If there are mandatory properties, you'll be notified about missing properties on commit.

`Commit Changes`:: Button for committing the changed configuration of the selected execution environment. 

[NOTE]
The properties panel offers two different views between which you can switch by clicking the icon-button image:RightNavigation_Button.png[RightNavigation_Button].
Depending on the execution environment implementation the extended properties view may contain mandatory properties.

[[ChapterDataWorkflowTasks]]
Data Workflow Tasks
^^^^^^^^^^^^^^^^^^^

A data workflow task describes a single task that can be executed alone or in a chain of multiple tasks. In contrast to other elements configured in the settings-view, 
a basic versioning is applied to data workflow tasks. Changing the `TASK NAME`, the `PACKAGE URL`
or the `ARGUMENTS` will result in a new workflow task (in case of changing the name) or to a new task version (in case of changing the package url or arguments). 
All other fields can be changed without any effect to the task version.

Creating data workflow task is done using the data-workflow-tasks-tab selectable in the <<ChapterSettings,settings-view>>:

Create New Data Workflow Task:: For creating a new data workflow task, select the item
`NEW` from the left-hand container `AVAILABLE ELEMENTS`. Fill all fields according to your task properties and requirements. `PACKAGE_URL` should be in the form
`file://<ZIP_LOCATION_ON_LOCAL_FILESYSTEM>`. Optionally, you can provide `ENVIRONMENT PROPERTIES` that have to be provided by an execution environment in order 
to execute the task. Please refer to the <<ChapterExecutionEnvironments,according section>> for more details. Finally, after committing the changed, the workflow task is 
registered and can be linked to Digital Objects using the according REST service or Java API.

View/Modify Existing Data Workflow Tasks:: For viewing or modifying the configuration
of an already declared data workflow task, select the corresponding data workflow task
from the left-hand container `AVAILABLE ELEMENTS`. A valid selection 
enables all components of changeable data-workflow-task-properties. Finalize your changes 
by clicking the button `Commit Changes`.

[[DataWorkflowTaskConfiguration]]
image::screenshots/DataWorkflowTaskConfiguration_Selection.png[DataWorkflowTaskConfiguration, align="center"]

[horizontal]
`AVAILABLE_ELEMENTS`:: Container listing all defined data workflow tasks.

`TASK_NAME`:: Text field to display the unique task name. Changing the name of an existing task will result in creating a new task in version 1 with the same properties as the existing task.

`VERSION`:: Text field to display the version number of the task. The version number increases if any of the unchangeable field of a task, e.g. application URL or arguments, is changed. 
It is not allowed to modify the version number manually.

`CONTACT_USERID`:: Text field displaying the userId of the contact user of the workflow task, e.g. for application support. This userId must be a valid userId registered in the repository system.

`PACKAGE_URL`:: Text field displaying the package URL where the application zip archive is located. This URL must be in the format `file://<LOCAL_PATH>`, e.g. `file:///usr/share/apps/MyApp-1.0.zip`.

`ARGUMENTS`:: Text field displaying the application arguments which are appended to each application execution. Beware that these arguments cannot be changed for a workflow task. Changing the arguments
results in creating a new version of the task.

`KEYWORDS`:: Text area displaying a set of space separated keywords that might be used to search for a particular workflow task.

`DESCRIPTION`:: Text area displaying additional information with respect to the selected workflow task.

`Default`:: Check box for setting the selected workflow task as default task, e.g. to be applied by default to ingested Digital Objects. Currently, this flag is not actively used.

`Disabled`:: Check box for disabling the selected workflow task.

`ENVIRONMENT_PROPERTIES`:: A twin columns list allowing to select environment properties required by the workflow task. A button next to the list allows to add new properties.

`Commit Changes`:: Button for committing the changed configuration of the selected workflow task or to create a new task/a new version of the task if unchangeable fields have changed. 

[[ChapterJobScheduling]]
Job Scheduling
^^^^^^^^^^^^^^

The job scheduling is a new feature introduced in KIT Data Manager 1.2 allowing to 
configure and execute recurring jobs in a seamlessly integrated, platform independent
way. Basically, the job scheduling is a replacement for setting up Cron jobs for jobs
like data staging, metadata indexing or workflow execution.

Creating new job and scheduling their execution is provided by the job-scheduling-tab 
selectable in the <<ChapterSettings,settings-view>>:

Create New Job Schedule:: For creating a new job schedule, select the item
`NEW` from the left-hand container `AVAILABLE ELEMENTS`. The selection enables 
both, the upper text field `ENVIRONMENT HANDLER IMPLEMENTATION CLASS` and the button 
image:ImplementationClass_Button.png[ImplementationClass_Button]; contemporary 
the lower part of the form, designed for declaring the properties of a job schedule,
is disabled. For proceeding, enter the fully qualified class name of the implementation class that 
shall be used for creating the new job schedule before clicking 
image:ImplementationClass_Button.png[ImplementationClass_Button].

In case of a successfully created job schedule, the remaining form is enabled, 
permitting the further configuration of the newly created job schedule. Declare 
all remaining properties (except `TRIGGERS`) and persist the job schedule by clicking the button `Commit Changes`. 
Finally, in order to trigger the job execution, one or more triggers have to be assigned to the job. Click the 
add button next to the trigger table. In the popup which opens there are four different triggers available:

[cols="m,n", options="header"]
|============================================================================================================================
|Trigger|Description
|'Now' Trigger|Triggers a immediate, single-time job execution. After the execution, the trigger is removed again.
|'At' Trigger|Triggers a single-time job execution at a specific time. After the execution, the trigger is removed again.
|'Expression' Trigger|Triggers a repeated job execution specified in a Cron-like syntax.
|'Interval' Trigger|Triggers a repreated job execution in a specific interval in seconds and with an optional number of times.
|============================================================================================================================

For typical use cases it is recommended to use either 'Expression' or 'Interval' triggers as they typically run as long as they are not removed manually.
'Now' and 'At' triggers are bound to a specific time, would disappear afterwards and the according job won't be triggered any longer.

--
'''

[WARNING]
Newly created job schedules will have the job id `UNSCHEDULED`. Such jobs are not persisted, yet, and will disappear if the settings tab is changed. 
After completing all mandatory fields, job schedules have to be persisted using the `Commit` button before triggers can be assigned. 

'''
--

View/Modify Existing Job Schedules:: For viewing or modifying the configuration
of an already declared job schedule, select the corresponding job schedule
from the left-hand container `AVAILABLE ELEMENTS`. A valid selection 
enables all components of changeable job-schedule-properties. Finalize your changes 
by clicking the button `Commit Changes`.

[[JobScheduleConfiguration]]
image::screenshots/JobScheduleConfiguration_Selection.png[JobScheduleConfiguration, align="center"]

[horizontal]
`AVAILABLE_ELEMENTS`:: Container listing all defined staging processors.

`JOB_IMPLEMENTATION_CLASS`:: Text field declaring the implementation 
class on which the selected job schedule is based.

image:ImplementationClass_Button.png[ImplementationClass_Button]:: Button for
creating a job schedule with the implementation class declared in the text 
fiel `JOB_IMPLEMENTATION_CLASS`.

`JOB_ID`:: Text field displaying the unique id of the selected job schedule.

`JOB_GROUP`:: Text field displaying the group name of the selected job schedule.

`JOB_NAME`:: Text field displaying the name of the selected job schedule.

`DESCRIPTION`:: Text area displaying additional information with respect to the 
selected job schedule.

`TRIGGERS`:: A table showing all triggers assigned to the selected job. Triggers can be added, refreshed or removing using the accoding button next to the table. 
The refresh button is provided to allow a manual update as triggers might be removed automatically after a single execution.

`Extended Properties`:: Button for switching to the extended properties tab. Depending on the job there may or may not 
be extended properties available. If there are mandatory properties, you'll be notified about missing properties on commit.

`Commit Changes`:: Button for committing the changed configuration of the selected 
job schedule. 

[[ChapterLogout]]
Logout
^^^^^^

The logout from AdminUI happens through the menu item image:Logout_Button.png[Logout_Button, width="30"]. 
A successful logout leads you back to the AdminUI's <<ChapterLogin,login-panel>>.